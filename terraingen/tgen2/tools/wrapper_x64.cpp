#include "import/import.h"
static unsigned char free_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void free_imp_wrapc(uint32_t v0)
{
    free_imp((void *)v0);
#ifdef VERBOSE_WRAP
    std::cout << "free"  << " " << v0 << '\n';
#endif
}

static unsigned char new_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t new_imp_wrapc(uint32_t v0)
{
    uint32_t ret_val = (uint32_t)new_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "void * __cdecl operator new(unsigned int)"  << " " << v0 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char malloc_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t malloc_imp_wrapc(uint32_t v0)
{
    uint32_t ret_val = (uint32_t)malloc_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "malloc"  << " " << v0 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char delete_func_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void delete_func_imp_wrapc(uint32_t v0)
{
    delete_func_imp((void *)v0);
#ifdef VERBOSE_WRAP
    std::cout << "void __cdecl operator delete(void *)"  << " " << v0 << '\n';
#endif
}

static unsigned char delete_arr_func_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void delete_arr_func_imp_wrapc(uint32_t v0)
{
    delete_arr_func_imp((void *)v0);
#ifdef VERBOSE_WRAP
    std::cout << "void __cdecl operator delete[](void *)"  << " " << v0 << '\n';
#endif
}

static unsigned char memcpy_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x54, 0x24, 0x24, 0x48, 0xb8,
0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c,
0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7,
0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50,
0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t memcpy_imp_wrapc(uint32_t v0, uint32_t v1, uint32_t v2)
{
    uint32_t ret_val = (uint32_t)memcpy_imp((void *)v0, (void *)v1, (uint32_t)v2);
#ifdef VERBOSE_WRAP
    std::cout << "memcpy"  << " " << v0  << " " << v1  << " " << v2 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char strcmp_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55, 0x44,
0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41,
0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0,
0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0,
0x58, 0xcb, 0xc3
};

static uint32_t strcmp_imp_wrapc(uint32_t v0, uint32_t v1)
{
    uint32_t ret_val = (uint32_t)strcmp_imp((const char *)v0, (const char *)v1);
#ifdef VERBOSE_WRAP
    std::cout << "strcmp"  << " " << v0  << " " << v1 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char memcmp_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x54, 0x24, 0x24, 0x48, 0xb8,
0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c,
0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7,
0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50,
0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t memcmp_imp_wrapc(uint32_t v0, uint32_t v1, uint32_t v2)
{
    uint32_t ret_val = (uint32_t)memcmp_imp((const char *)v0, (const char *)v1, (uint32_t)v2);
#ifdef VERBOSE_WRAP
    std::cout << "memcmp"  << " " << v0  << " " << v1  << " " << v2 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char abort_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55,
0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f,
0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23,
0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0,
0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void abort_imp_wrapc()
{
    abort_imp();
#ifdef VERBOSE_WRAP
    std::cout << "abort" << '\n';
#endif
}

static unsigned char terminateYAXXZ_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55,
0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f,
0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23,
0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0,
0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void terminateYAXXZ_imp_wrapc()
{
    terminateYAXXZ_imp();
#ifdef VERBOSE_WRAP
    std::cout << "void __cdecl terminate(void)" << '\n';
#endif
}

static unsigned char WSAStartup_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55, 0x44,
0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41,
0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0,
0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0,
0x58, 0xcb, 0xc2, 0x8, 0x0
};

static uint32_t WSAStartup_imp_wrapc(uint32_t v0, uint32_t v1)
{
    uint32_t ret_val = (uint32_t)WSAStartup_imp((uint32_t)v0, (uint32_t)v1);
#ifdef VERBOSE_WRAP
    std::cout << "ORDINAL_WS2_32.DLL_115"  << " " << v0  << " " << v1 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char InitializeCriticalSectionAndSpinCount_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55, 0x44,
0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41,
0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0,
0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0,
0x58, 0xcb, 0xc2, 0x8, 0x0
};

static uint32_t InitializeCriticalSectionAndSpinCount_imp_wrapc(uint32_t v0, uint32_t v1)
{
    uint32_t ret_val = (uint32_t)InitializeCriticalSectionAndSpinCount_imp((uint32_t)v0, (uint32_t)v1);
#ifdef VERBOSE_WRAP
    std::cout << "InitializeCriticalSectionAndSpinCount"  << " " << v0  << " " << v1 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char DeleteCriticalSection_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc2, 0x4, 0x0
};

static void DeleteCriticalSection_imp_wrapc(uint32_t v0)
{
    DeleteCriticalSection_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "DeleteCriticalSection"  << " " << v0 << '\n';
#endif
}

static unsigned char rand_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55,
0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f,
0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23,
0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0,
0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t rand_imp_wrapc()
{
    uint32_t ret_val = (uint32_t)rand_imp();
#ifdef VERBOSE_WRAP
    std::cout << "rand" <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char srand_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void srand_imp_wrapc(uint32_t v0)
{
    srand_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "srand"  << " " << v0 << '\n';
#endif
}

static unsigned char IsProcessorFeaturePresent_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc2, 0x4, 0x0
};

static uint32_t IsProcessorFeaturePresent_imp_wrapc(uint32_t v0)
{
    uint32_t ret_val = (uint32_t)IsProcessorFeaturePresent_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "IsProcessorFeaturePresent"  << " " << v0 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char _beginthread_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x54, 0x24, 0x24, 0x48, 0xb8,
0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c,
0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7,
0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50,
0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void _beginthread_imp_wrapc(uint32_t v0, uint32_t v1, uint32_t v2)
{
    _beginthread_imp((uint32_t)v0, (uint32_t)v1, (uint32_t)v2);
#ifdef VERBOSE_WRAP
    std::cout << "_beginthread"  << " " << v0  << " " << v1  << " " << v2 << '\n';
#endif
}

static unsigned char EncodePointer_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc2, 0x4, 0x0
};

static uint32_t EncodePointer_imp_wrapc(uint32_t v0)
{
    uint32_t ret_val = (uint32_t)EncodePointer_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "EncodePointer"  << " " << v0 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char memmove_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x54, 0x24, 0x24, 0x48, 0xb8,
0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c,
0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7,
0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50,
0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t memmove_imp_wrapc(uint32_t v0, uint32_t v1, uint32_t v2)
{
    uint32_t ret_val = (uint32_t)memmove_imp((void *)v0, (const void *)v1, (uint32_t)v2);
#ifdef VERBOSE_WRAP
    std::cout << "memmove"  << " " << v0  << " " << v1  << " " << v2 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char memset_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x54, 0x24, 0x24, 0x48, 0xb8,
0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c,
0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7,
0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50,
0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t memset_imp_wrapc(uint32_t v0, uint32_t v1, uint32_t v2)
{
    uint32_t ret_val = (uint32_t)memset_imp((void *)v0, (int32_t)v1, (uint32_t)v2);
#ifdef VERBOSE_WRAP
    std::cout << "memset"  << " " << v0  << " " << v1  << " " << v2 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char fseek_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x54, 0x24, 0x24, 0x48, 0xb8,
0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c,
0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7,
0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50,
0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t fseek_imp_wrapc(uint32_t v0, uint32_t v1, uint32_t v2)
{
    uint32_t ret_val = (uint32_t)fseek_imp((uint32_t)v0, (uint32_t)v1, (uint32_t)v2);
#ifdef VERBOSE_WRAP
    std::cout << "fseek"  << " " << v0  << " " << v1  << " " << v2 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char fwrite_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x54, 0x24, 0x24, 0x49, 0x8b,
0x4c, 0x24, 0x28, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33,
0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c,
0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0,
0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58,
0xcb, 0xc3
};

static uint32_t fwrite_imp_wrapc(uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3)
{
    uint32_t ret_val = (uint32_t)fwrite_imp((const void *)v0, (uint32_t)v1, (uint32_t)v2, (uint32_t)v3);
#ifdef VERBOSE_WRAP
    std::cout << "fwrite"  << " " << v0  << " " << v1  << " " << v2  << " " << v3 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char fclose_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t fclose_imp_wrapc(uint32_t v0)
{
    uint32_t ret_val = (uint32_t)fclose_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "fclose"  << " " << v0 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char _setjmp_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t _setjmp_imp_wrapc(uint32_t v0)
{
    uint32_t ret_val = (uint32_t)_setjmp_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "_setjmp"  << " " << v0 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char InitializeCriticalSection_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc2, 0x4, 0x0
};

static void InitializeCriticalSection_imp_wrapc(uint32_t v0)
{
    InitializeCriticalSection_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "InitializeCriticalSection"  << " " << v0 << '\n';
#endif
}

static unsigned char EnterCriticalSection_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc2, 0x4, 0x0
};

static void EnterCriticalSection_imp_wrapc(uint32_t v0)
{
    EnterCriticalSection_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "EnterCriticalSection"  << " " << v0 << '\n';
#endif
}

static unsigned char LeaveCriticalSection_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc2, 0x4, 0x0
};

static void LeaveCriticalSection_imp_wrapc(uint32_t v0)
{
    LeaveCriticalSection_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "LeaveCriticalSection"  << " " << v0 << '\n';
#endif
}

static unsigned char InterlockedCompareExchange_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x54, 0x24, 0x24, 0x48, 0xb8,
0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c,
0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7,
0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50,
0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc2, 0xc, 0x0
};

static uint32_t InterlockedCompareExchange_imp_wrapc(uint32_t v0, uint32_t v1, uint32_t v2)
{
    uint32_t ret_val = (uint32_t)InterlockedCompareExchange_imp((uint32_t *)v0, (uint32_t)v1, (uint32_t)v2);
#ifdef VERBOSE_WRAP
    std::cout << "InterlockedCompareExchange"  << " " << v0  << " " << v1  << " " << v2 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char _setjmp3_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55, 0x44,
0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41,
0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0,
0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0,
0x58, 0xcb, 0xc3
};

static void _setjmp3_imp_wrapc(uint32_t v0, uint32_t v1)
{
    _setjmp3_imp((uint32_t)v0, (uint32_t)v1);
}

static unsigned char orphan_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void orphan_imp_wrapc(uint32_t v0)
{
    orphan_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "public: void __thiscall std::_Container_base0::_Orphan_all(void)"  << " " << v0 << '\n';
#endif
}

static unsigned char _libm_sse2_cos_precise_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55,
0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f,
0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23,
0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0,
0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static double _libm_sse2_cos_precise_imp_wrapc(double v0)
{
    double ret_val = (double)_libm_sse2_cos_precise_imp((double)v0);
#ifdef VERBOSE_WRAP
    std::cout << "_libm_sse2_cos_precise"  << " " << v0 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char _libm_sse2_sin_precise_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55,
0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f,
0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23,
0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0,
0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static double _libm_sse2_sin_precise_imp_wrapc(double v0)
{
    double ret_val = (double)_libm_sse2_sin_precise_imp((double)v0);
#ifdef VERBOSE_WRAP
    std::cout << "_libm_sse2_sin_precise"  << " " << v0 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char _libm_sse2_sqrt_precise_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55,
0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f,
0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23,
0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0,
0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static double _libm_sse2_sqrt_precise_imp_wrapc(double v0)
{
    double ret_val = (double)_libm_sse2_sqrt_precise_imp((double)v0);
#ifdef VERBOSE_WRAP
    std::cout << "_libm_sse2_sqrt_precise"  << " " << v0 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char _libm_sse2_pow_precise_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55,
0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f,
0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23,
0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0,
0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static double _libm_sse2_pow_precise_imp_wrapc(double v0, double v1)
{
    double ret_val = (double)_libm_sse2_pow_precise_imp((double)v0, (double)v1);
#ifdef VERBOSE_WRAP
    std::cout << "_libm_sse2_pow_precise"  << " " << v0  << " " << v1 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char _libm_sse2_exp_precise_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55,
0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f,
0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23,
0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0,
0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static double _libm_sse2_exp_precise_wrapc(double v0)
{
    double ret_val = (double)_libm_sse2_exp_precise((double)v0);
#ifdef VERBOSE_WRAP
    std::cout << "_libm_sse2_exp_precise"  << " " << v0 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char _libm_sse2_acos_precise_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55,
0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f,
0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23,
0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0,
0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static double _libm_sse2_acos_precise_wrapc(double v0)
{
    double ret_val = (double)_libm_sse2_acos_precise((double)v0);
#ifdef VERBOSE_WRAP
    std::cout << "_libm_sse2_acos_precise"  << " " << v0 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char _libm_sse2_asin_precise_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55,
0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f,
0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23,
0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0,
0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static double _libm_sse2_asin_precise_wrapc(double v0)
{
    double ret_val = (double)_libm_sse2_asin_precise((double)v0);
#ifdef VERBOSE_WRAP
    std::cout << "_libm_sse2_asin_precise"  << " " << v0 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char basic_istream_char_ctor_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x74,
0x24, 0x1c, 0x49, 0x8b, 0x54, 0x24, 0x20, 0x49, 0x8b, 0x4c, 0x24,
0x24, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11,
0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0,
0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24,
0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc2, 0xc,
0x0
};

static uint32_t basic_istream_char_ctor_imp_wrapc(uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3)
{
    uint32_t ret_val = (uint32_t)basic_istream_char_ctor_imp((uint32_t)v0, (uint32_t)v1, (uint32_t)v2, (uint32_t)v3);
#ifdef VERBOSE_WRAP
    std::cout << "public: __thiscall std::basic_istream<char,struct std::char_traits<char> >::basic_istream<char,struct std::char_traits<char> >(class std::basic_streambuf<char,struct std::char_traits<char> > *,bool)"  << " " << v0  << " " << v1  << " " << v2  << " " << v3 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char basic_streambuf_char_ctor_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t basic_streambuf_char_ctor_imp_wrapc(uint32_t v0)
{
    uint32_t ret_val = (uint32_t)basic_streambuf_char_ctor_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "protected: __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::basic_streambuf<char,struct std::char_traits<char> >(void)"  << " " << v0 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char basic_streambuf_char__Init_empty_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void basic_streambuf_char__Init_empty_imp_wrapc(uint32_t v0)
{
    basic_streambuf_char__Init_empty_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "protected: void __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::_Init(void)"  << " " << v0 << '\n';
#endif
}

static unsigned char basic_ios_char_setstate_reraise_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x74,
0x24, 0x1c, 0x49, 0x8b, 0x54, 0x24, 0x20, 0x48, 0xb8, 0x88, 0x77,
0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4,
0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24,
0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8,
0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc2, 0x8, 0x0
};

static void basic_ios_char_setstate_reraise_imp_wrapc(uint32_t v0, uint32_t v1, uint32_t v2)
{
    basic_ios_char_setstate_reraise_imp((uint32_t)v0, (uint32_t)v1, (uint32_t)v2);
#ifdef VERBOSE_WRAP
    std::cout << "public: void __thiscall std::basic_ios<char,struct std::char_traits<char> >::setstate(int,bool)"  << " " << v0  << " " << v1  << " " << v2 << '\n';
#endif
}

static unsigned char basic_streambuf_char_dtor_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void basic_streambuf_char_dtor_imp_wrapc(uint32_t v0)
{
    basic_streambuf_char_dtor_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "public: virtual __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::~basic_streambuf<char,struct std::char_traits<char> >(void)"  << " " << v0 << '\n';
#endif
}

static unsigned char basic_istream_char_dtor_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void basic_istream_char_dtor_imp_wrapc(uint32_t v0)
{
    basic_istream_char_dtor_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "public: virtual __thiscall std::basic_istream<char,struct std::char_traits<char> >::~basic_istream<char,struct std::char_traits<char> >(void)"  << " " << v0 << '\n';
#endif
}

static unsigned char basic_ios_char_dtor_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void basic_ios_char_dtor_imp_wrapc(uint32_t v0)
{
    basic_ios_char_dtor_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "public: virtual __thiscall std::basic_ios<char,struct std::char_traits<char> >::~basic_ios<char,struct std::char_traits<char> >(void)"  << " " << v0 << '\n';
#endif
}

static unsigned char _Fiopen_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x54, 0x24, 0x24, 0x48, 0xb8,
0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c,
0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7,
0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50,
0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t _Fiopen_imp_wrapc(uint32_t v0, uint32_t v1, uint32_t v2)
{
    uint32_t ret_val = (uint32_t)_Fiopen_imp((char *)v0, (uint32_t)v1, (uint32_t)v2);
#ifdef VERBOSE_WRAP
    std::cout << "struct _iobuf * __cdecl std::_Fiopen(char const *,int,int)"  << " " << v0  << " " << v1  << " " << v2 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char basic_istream_char_read_int_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x74,
0x24, 0x1c, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22,
0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0,
0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4,
0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc2,
0x4, 0x0
};

static uint32_t basic_istream_char_read_int_imp_wrapc(uint32_t v0, uint32_t v1)
{
    uint32_t ret_val = (uint32_t)basic_istream_char_read_int_imp((uint32_t)v0, (uint32_t *)v1);
#ifdef VERBOSE_WRAP
    std::cout << "public: class std::basic_istream<char,struct std::char_traits<char> > & __thiscall std::basic_istream<char,struct std::char_traits<char> >::operator>>(int &)"  << " " << v0  << " " << v1 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char basic_ios_char_ctor_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t basic_ios_char_ctor_imp_wrapc(uint32_t v0)
{
    uint32_t ret_val = (uint32_t)basic_ios_char_ctor_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "protected: __thiscall std::basic_ios<char,struct std::char_traits<char> >::basic_ios<char,struct std::char_traits<char> >(void)"  << " " << v0 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char basic_iostream_char_ctor_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x74,
0x24, 0x1c, 0x49, 0x8b, 0x54, 0x24, 0x20, 0x48, 0xb8, 0x88, 0x77,
0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4,
0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24,
0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8,
0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc2, 0x8, 0x0
};

static uint32_t basic_iostream_char_ctor_imp_wrapc(uint32_t v0, uint32_t v1, uint32_t v2)
{
    uint32_t ret_val = (uint32_t)basic_iostream_char_ctor_imp((uint32_t)v0, (uint32_t)v1, (uint32_t)v2);
#ifdef VERBOSE_WRAP
    std::cout << "public: __thiscall std::basic_iostream<char,struct std::char_traits<char> >::basic_iostream<char,struct std::char_traits<char> >(class std::basic_streambuf<char,struct std::char_traits<char> > *)"  << " " << v0  << " " << v1  << " " << v2 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char basic_iostream_char_dtor_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void basic_iostream_char_dtor_imp_wrapc(uint32_t v0)
{
    basic_iostream_char_dtor_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "public: virtual __thiscall std::basic_iostream<char,struct std::char_traits<char> >::~basic_iostream<char,struct std::char_traits<char> >(void)"  << " " << v0 << '\n';
#endif
}

static unsigned char ios_base_Ios_base_dtor_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void ios_base_Ios_base_dtor_imp_wrapc(uint32_t v0)
{
    ios_base_Ios_base_dtor_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "private: static void __cdecl std::ios_base::_Ios_base_dtor(class std::ios_base *)"  << " " << v0 << '\n';
#endif
}

static unsigned char basic_streambuf_char_sputn_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x74,
0x24, 0x1c, 0x49, 0x8b, 0x54, 0x24, 0x20, 0x48, 0xb8, 0x88, 0x77,
0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4,
0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24,
0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8,
0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc2, 0x8, 0x0
};

static uint32_t basic_streambuf_char_sputn_imp_wrapc(uint32_t v0, uint32_t v1, uint32_t v2)
{
    uint32_t ret_val = (uint32_t)basic_streambuf_char_sputn_imp((uint32_t)v0, (char *)v1, (uint64_t)v2);
#ifdef VERBOSE_WRAP
    std::cout << "public: __int64 __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::sputn(char const *,__int64)"  << " " << v0  << " " << v1  << " " << v2 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char __uncaught_exception_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55,
0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f,
0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23,
0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0,
0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t __uncaught_exception_imp_wrapc()
{
    uint32_t ret_val = (uint32_t)__uncaught_exception_imp();
#ifdef VERBOSE_WRAP
    std::cout << "__uncaught_exception" <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char basic_ostream_char__Osfx_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void basic_ostream_char__Osfx_imp_wrapc(uint32_t v0)
{
    basic_ostream_char__Osfx_imp((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "public: void __thiscall std::basic_ostream<char,struct std::char_traits<char> >::_Osfx(void)"  << " " << v0 << '\n';
#endif
}

static unsigned char basic_ostream_char_print_int_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x74,
0x24, 0x1c, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22,
0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0,
0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4,
0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc2,
0x4, 0x0
};

static uint32_t basic_ostream_char_print_int_imp_wrapc(uint32_t v0, uint32_t v1)
{
    uint32_t ret_val = (uint32_t)basic_ostream_char_print_int_imp((uint32_t)v0, (int32_t)v1);
#ifdef VERBOSE_WRAP
    std::cout << "public: class std::basic_ostream<char,struct std::char_traits<char> > & __thiscall std::basic_ostream<char,struct std::char_traits<char> >::operator<<(int)"  << " " << v0  << " " << v1 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char basic_streambuf_char_setg_imp_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x74,
0x24, 0x1c, 0x49, 0x8b, 0x54, 0x24, 0x20, 0x49, 0x8b, 0x4c, 0x24,
0x24, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11,
0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0,
0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24,
0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc2, 0xc,
0x0
};

static void basic_streambuf_char_setg_imp_wrapc(uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3)
{
    basic_streambuf_char_setg_imp((uint32_t)v0, (uint32_t)v1, (uint32_t)v2, (uint32_t)v3);
#ifdef VERBOSE_WRAP
    std::cout << "protected: void __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::setg(char *,char *,char *)"  << " " << v0  << " " << v1  << " " << v2  << " " << v3 << '\n';
#endif
}

static unsigned char basic_ios_wchar_ctor_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void basic_ios_wchar_ctor_wrapc(uint32_t v0)
{
    basic_ios_wchar_ctor((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "protected: __thiscall std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::basic_ios<wchar_t,struct std::char_traits<wchar_t> >(void)"  << " " << v0 << '\n';
#endif
}

static unsigned char basic_iostream_wchar_ctor_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x74,
0x24, 0x1c, 0x49, 0x8b, 0x54, 0x24, 0x20, 0x48, 0xb8, 0x88, 0x77,
0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4,
0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24,
0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8,
0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc2, 0x8, 0x0
};

static void basic_iostream_wchar_ctor_wrapc(uint32_t v0, uint32_t v1, uint32_t v2)
{
    basic_iostream_wchar_ctor((uint32_t)v0, (uint32_t)v1, (uint32_t)v2);
#ifdef VERBOSE_WRAP
    std::cout << "public: __thiscall std::basic_iostream<wchar_t,struct std::char_traits<wchar_t> >::basic_iostream<wchar_t,struct std::char_traits<wchar_t> >(class std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> > *)"  << " " << v0  << " " << v1  << " " << v2 << '\n';
#endif
}

static unsigned char basic_streambuf_wchar_ctor_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void basic_streambuf_wchar_ctor_wrapc(uint32_t v0)
{
    basic_streambuf_wchar_ctor((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "protected: __thiscall std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >(void)"  << " " << v0 << '\n';
#endif
}

static unsigned char basic_streambuf_wchar_dtor_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void basic_streambuf_wchar_dtor_wrapc(uint32_t v0)
{
    basic_streambuf_wchar_dtor((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "public: virtual __thiscall std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >(void)"  << " " << v0 << '\n';
#endif
}

static unsigned char basic_iostream_wchar_dtor_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void basic_iostream_wchar_dtor_wrapc(uint32_t v0)
{
    basic_iostream_wchar_dtor((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "public: virtual __thiscall std::basic_iostream<wchar_t,struct std::char_traits<wchar_t> >::~basic_iostream<wchar_t,struct std::char_traits<wchar_t> >(void)"  << " " << v0 << '\n';
#endif
}

static unsigned char basic_ios_wchar_dtor_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void basic_ios_wchar_dtor_wrapc(uint32_t v0)
{
    basic_ios_wchar_dtor((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "public: virtual __thiscall std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::~basic_ios<wchar_t,struct std::char_traits<wchar_t> >(void)"  << " " << v0 << '\n';
#endif
}

static unsigned char sub_4120D0_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55, 0x44,
0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41,
0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0,
0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0,
0x58, 0xcb, 0xc3
};

static uint32_t sub_4120D0_wrapc(uint32_t v0, uint32_t v1)
{
    uint32_t ret_val = (uint32_t)sub_4120D0((uint32_t)v0, (char *)v1);
#ifdef VERBOSE_WRAP
    std::cout << "sub_4120D0"  << " " << v0  << " " << v1 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char sub_4C6970_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55, 0x44,
0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41,
0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0,
0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0,
0x58, 0xcb, 0xc3
};

static uint32_t sub_4C6970_wrapc(uint32_t v0, uint32_t v1)
{
    uint32_t ret_val = (uint32_t)sub_4C6970((uint32_t)v0, (basic_string_char *)v1);
#ifdef VERBOSE_WRAP
    std::cout << "sub_4C6970"  << " " << v0  << " " << v1 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char sub_4D8B70_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x48, 0x89, 0xcf, 0x83,
0xe4, 0xf0, 0x48, 0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x74,
0x24, 0x1c, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22,
0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0,
0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4,
0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc2,
0x4, 0x0
};

static uint32_t sub_4D8B70_wrapc(uint32_t v0, uint32_t v1)
{
    uint32_t ret_val = (uint32_t)sub_4D8B70((uint32_t)v0, (basic_string_char *)v1);
#ifdef VERBOSE_WRAP
    std::cout << "sub_4D8B70"  << " " << v0  << " " << v1 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char sub_469210_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x54, 0x24, 0x24, 0x49, 0x8b,
0x4c, 0x24, 0x28, 0x4d, 0x8b, 0x44, 0x24, 0x2c, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t sub_469210_wrapc(uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3, uint32_t v4)
{
    uint32_t ret_val = (uint32_t)sub_469210((uint32_t)v0, (char *)v1, (uint32_t)v2, (uint32_t *)v3, (uint32_t)v4);
#ifdef VERBOSE_WRAP
    std::cout << "sub_469210"  << " " << v0  << " " << v1  << " " << v2  << " " << v3  << " " << v4 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char sub_4698F0_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x54, 0x24, 0x24, 0x49, 0x8b,
0x4c, 0x24, 0x28, 0x4d, 0x8b, 0x44, 0x24, 0x2c, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t sub_4698F0_wrapc(uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3, uint32_t v4)
{
    uint32_t ret_val = (uint32_t)sub_4698F0((uint32_t)v0, (uint32_t)v1, (char *)v2, (int32_t)v3, (uint32_t)v4);
#ifdef VERBOSE_WRAP
    std::cout << "sub_4698F0"  << " " << v0  << " " << v1  << " " << v2  << " " << v3  << " " << v4 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char sub_46A090_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t sub_46A090_wrapc(uint32_t v0)
{
    uint32_t ret_val = (uint32_t)sub_46A090((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "sub_46A090"  << " " << v0 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char sub_46AE00_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t sub_46AE00_wrapc(uint32_t v0)
{
    uint32_t ret_val = (uint32_t)sub_46AE00((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "sub_46AE00"  << " " << v0 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char sub_46A3A0_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55, 0x44,
0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41,
0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0,
0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0,
0x58, 0xcb, 0xc3
};

static uint32_t sub_46A3A0_wrapc(uint32_t v0, uint32_t v1)
{
    uint32_t ret_val = (uint32_t)sub_46A3A0((uint32_t)v0, (int32_t)v1);
#ifdef VERBOSE_WRAP
    std::cout << "sub_46A3A0"  << " " << v0  << " " << v1 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char sub_46A320_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55, 0x44,
0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41,
0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0,
0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0,
0x58, 0xcb, 0xc3
};

static uint32_t sub_46A320_wrapc(uint32_t v0, uint32_t v1)
{
    uint32_t ret_val = (uint32_t)sub_46A320((uint32_t)v0, (int32_t)v1);
#ifdef VERBOSE_WRAP
    std::cout << "sub_46A320"  << " " << v0  << " " << v1 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char sub_4633C0_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x48,
0xb8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0,
0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t sub_4633C0_wrapc(uint32_t v0)
{
    uint32_t ret_val = (uint32_t)sub_4633C0((uint32_t)v0);
#ifdef VERBOSE_WRAP
    std::cout << "sub_4633C0"  << " " << v0 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char sub_469530_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x54, 0x24, 0x24, 0x49, 0x8b,
0x4c, 0x24, 0x28, 0x4d, 0x8b, 0x44, 0x24, 0x2c, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t sub_469530_wrapc(uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3, uint32_t v4)
{
    uint32_t ret_val = (uint32_t)sub_469530((uint32_t)v0, (uint32_t)v1, (char *)v2, (uint32_t)v3, (uint32_t)v4);
#ifdef VERBOSE_WRAP
    std::cout << "sub_469530"  << " " << v0  << " " << v1  << " " << v2  << " " << v3  << " " << v4 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char sub_468330_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55, 0x44,
0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f, 0x41,
0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0,
0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0,
0x58, 0xcb, 0xc3
};

static uint32_t sub_468330_wrapc(uint32_t v0, uint32_t v1)
{
    uint32_t ret_val = (uint32_t)sub_468330((char *)v0, (uint32_t *)v1);
#ifdef VERBOSE_WRAP
    std::cout << "sub_468330"  << " " << v0  << " " << v1 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char sub_463500_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7c, 0x24, 0x1c, 0x49,
0x8b, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x54, 0x24, 0x24, 0x49, 0x8b,
0x4c, 0x24, 0x28, 0x4d, 0x8b, 0x44, 0x24, 0x2c, 0x48, 0xb8, 0x88,
0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89,
0xe4, 0x5e, 0x5f, 0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static uint32_t sub_463500_wrapc(uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3, uint32_t v4)
{
    uint32_t ret_val = (uint32_t)sub_463500((uint32_t)v0, (char *)v1, (uint32_t)v2, (uint32_t)v3, (uint32_t)v4);
#ifdef VERBOSE_WRAP
    std::cout << "sub_463500"  << " " << v0  << " " << v1  << " " << v2  << " " << v3  << " " << v4 <<  " -> " << ret_val << '\n';
#endif
    return ret_val;
}

static unsigned char sub_46B620_asm[] = 
{
0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb,
0x41, 0x54, 0x57, 0x56, 0x49, 0x89, 0xe4, 0x83, 0xe4, 0xf0, 0x48,
0x81, 0xec, 0x80, 0x0, 0x0, 0x0, 0x48, 0xb8, 0x88, 0x77, 0x66, 0x55,
0x44, 0x33, 0x22, 0x11, 0xff, 0xd0, 0x4c, 0x89, 0xe4, 0x5e, 0x5f,
0x41, 0x5c, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23,
0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0,
0x8e, 0xd0, 0x58, 0xcb, 0xc3
};

static void sub_46B620_wrapc()
{
    sub_46B620();
#ifdef VERBOSE_WRAP
    std::cout << "sub_46B620" << '\n';
#endif
}

uint32_t (*call_x86_thiscall_0)(void*);
unsigned char call_x86_thiscall_0_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a, 0x2b, 0x1f, 0x6a, 0x2b,
0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4,
0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_thiscall_1)(void*, uint32_t);
unsigned char call_x86_thiscall_1_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0xf1, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a, 0x2b, 0x1f,
0x6a, 0x2b, 0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0,
0x83, 0x4, 0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_thiscall_2)(void*, uint32_t, uint32_t);
unsigned char call_x86_thiscall_2_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0x54, 0x24, 0xfc, 0x48, 0x8d,
0x64, 0x24, 0xfc, 0x89, 0xf1, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a, 0x2b, 0x1f, 0x6a, 0x2b,
0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4,
0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_thiscall_3)(void*, uint32_t, uint32_t, uint32_t);
unsigned char call_x86_thiscall_3_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0x54, 0x24, 0xf8, 0x89, 0x4c,
0x24, 0xfc, 0x48, 0x8d, 0x64, 0x24, 0xf8, 0x89, 0xf1, 0xe8, 0x0, 0x0,
0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24,
0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a, 0x2b,
0x1f, 0x6a, 0x2b, 0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0,
0x0, 0x83, 0x4, 0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_thiscall_4)(void*, uint32_t, uint32_t, uint32_t, uint32_t);
unsigned char call_x86_thiscall_4_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0x54, 0x24, 0xf4, 0x89, 0x4c,
0x24, 0xf8, 0x44, 0x89, 0x44, 0x24, 0xfc, 0x48, 0x8d, 0x64, 0x24,
0xf4, 0x89, 0xf1, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4,
0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b,
0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a, 0x2b, 0x1f, 0x6a, 0x2b, 0x7, 0xff,
0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5,
0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_thiscall_5)(void*, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
unsigned char call_x86_thiscall_5_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0x54, 0x24, 0xf0, 0x89, 0x4c,
0x24, 0xf4, 0x44, 0x89, 0x44, 0x24, 0xf8, 0x44, 0x89, 0x4c, 0x24,
0xfc, 0x48, 0x8d, 0x64, 0x24, 0xf0, 0x89, 0xf1, 0xe8, 0x0, 0x0, 0x0,
0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24,
0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a, 0x2b,
0x1f, 0x6a, 0x2b, 0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0,
0x0, 0x83, 0x4, 0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_thiscall_6)(void*, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
unsigned char call_x86_thiscall_6_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0x54, 0x24, 0xec, 0x89, 0x4c,
0x24, 0xf0, 0x44, 0x89, 0x44, 0x24, 0xf4, 0x44, 0x89, 0x4c, 0x24,
0xf8, 0x4c, 0x8b, 0x54, 0x24, 0x18, 0x44, 0x89, 0x54, 0x24, 0xfc,
0x48, 0x8d, 0x64, 0x24, 0xec, 0x89, 0xf1, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a, 0x2b, 0x1f,
0x6a, 0x2b, 0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0,
0x83, 0x4, 0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_cdecl_0)(void*);
unsigned char call_x86_cdecl_0_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a, 0x2b, 0x1f, 0x6a, 0x2b,
0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4,
0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_cdecl_1)(void*, uint32_t);
unsigned char call_x86_cdecl_1_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0x74, 0x24, 0xfc, 0x48, 0x8d,
0x64, 0x24, 0xfc, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4,
0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b,
0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a, 0x2b, 0x1f, 0x6a, 0x2b, 0x7, 0xff,
0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5,
0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_cdecl_2)(void*, uint32_t, uint32_t);
unsigned char call_x86_cdecl_2_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0x74, 0x24, 0xf8, 0x89, 0x54,
0x24, 0xfc, 0x48, 0x8d, 0x64, 0x24, 0xf8, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a, 0x2b, 0x1f,
0x6a, 0x2b, 0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0,
0x83, 0x4, 0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_cdecl_3)(void*, uint32_t, uint32_t, uint32_t);
unsigned char call_x86_cdecl_3_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0x74, 0x24, 0xf4, 0x89, 0x54,
0x24, 0xf8, 0x89, 0x4c, 0x24, 0xfc, 0x48, 0x8d, 0x64, 0x24, 0xf4,
0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0,
0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58,
0xcb, 0x6a, 0x2b, 0x1f, 0x6a, 0x2b, 0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8,
0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_cdecl_4)(void*, uint32_t, uint32_t, uint32_t, uint32_t);
unsigned char call_x86_cdecl_4_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0x74, 0x24, 0xf0, 0x89, 0x54,
0x24, 0xf4, 0x89, 0x4c, 0x24, 0xf8, 0x44, 0x89, 0x44, 0x24, 0xfc,
0x48, 0x8d, 0x64, 0x24, 0xf0, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a, 0x2b, 0x1f, 0x6a, 0x2b,
0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4,
0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_cdecl_5)(void*, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
unsigned char call_x86_cdecl_5_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0x74, 0x24, 0xec, 0x89, 0x54,
0x24, 0xf0, 0x89, 0x4c, 0x24, 0xf4, 0x44, 0x89, 0x44, 0x24, 0xf8,
0x44, 0x89, 0x4c, 0x24, 0xfc, 0x48, 0x8d, 0x64, 0x24, 0xec, 0xe8, 0x0,
0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4,
0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a,
0x2b, 0x1f, 0x6a, 0x2b, 0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0,
0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_cdecl_6)(void*, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
unsigned char call_x86_cdecl_6_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0x74, 0x24, 0xe8, 0x89, 0x54,
0x24, 0xec, 0x89, 0x4c, 0x24, 0xf0, 0x44, 0x89, 0x44, 0x24, 0xf4,
0x44, 0x89, 0x4c, 0x24, 0xf8, 0x4c, 0x8b, 0x54, 0x24, 0x18, 0x44,
0x89, 0x54, 0x24, 0xfc, 0x48, 0x8d, 0x64, 0x24, 0xe8, 0xe8, 0x0, 0x0,
0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24,
0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a, 0x2b,
0x1f, 0x6a, 0x2b, 0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0,
0x0, 0x83, 0x4, 0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_stdcall_0)(void*);
unsigned char call_x86_stdcall_0_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a, 0x2b, 0x1f, 0x6a, 0x2b,
0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4,
0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_stdcall_1)(void*, uint32_t);
unsigned char call_x86_stdcall_1_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0x74, 0x24, 0xfc, 0x48, 0x8d,
0x64, 0x24, 0xfc, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4,
0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b,
0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a, 0x2b, 0x1f, 0x6a, 0x2b, 0x7, 0xff,
0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5,
0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_stdcall_2)(void*, uint32_t, uint32_t);
unsigned char call_x86_stdcall_2_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0x74, 0x24, 0xf8, 0x89, 0x54,
0x24, 0xfc, 0x48, 0x8d, 0x64, 0x24, 0xf8, 0xe8, 0x0, 0x0, 0x0, 0x0,
0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15,
0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a, 0x2b, 0x1f,
0x6a, 0x2b, 0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0,
0x83, 0x4, 0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_stdcall_3)(void*, uint32_t, uint32_t, uint32_t);
unsigned char call_x86_stdcall_3_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0x74, 0x24, 0xf4, 0x89, 0x54,
0x24, 0xf8, 0x89, 0x4c, 0x24, 0xfc, 0x48, 0x8d, 0x64, 0x24, 0xf4,
0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0,
0x83, 0x4, 0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58,
0xcb, 0x6a, 0x2b, 0x1f, 0x6a, 0x2b, 0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8,
0x0, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_stdcall_4)(void*, uint32_t, uint32_t, uint32_t, uint32_t);
unsigned char call_x86_stdcall_4_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0x74, 0x24, 0xf0, 0x89, 0x54,
0x24, 0xf4, 0x89, 0x4c, 0x24, 0xf8, 0x44, 0x89, 0x44, 0x24, 0xfc,
0x48, 0x8d, 0x64, 0x24, 0xf0, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44,
0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24, 0x15, 0x50, 0x66,
0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a, 0x2b, 0x1f, 0x6a, 0x2b,
0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x83, 0x4,
0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_stdcall_5)(void*, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
unsigned char call_x86_stdcall_5_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0x74, 0x24, 0xec, 0x89, 0x54,
0x24, 0xf0, 0x89, 0x4c, 0x24, 0xf4, 0x44, 0x89, 0x44, 0x24, 0xf8,
0x44, 0x89, 0x4c, 0x24, 0xfc, 0x48, 0x8d, 0x64, 0x24, 0xec, 0xe8, 0x0,
0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4,
0x24, 0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a,
0x2b, 0x1f, 0x6a, 0x2b, 0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0,
0x0, 0x0, 0x83, 0x4, 0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*call_x86_stdcall_6)(void*, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
unsigned char call_x86_stdcall_6_asm[] = {
0x48, 0x89, 0xf8, 0x55, 0x53, 0x89, 0x74, 0x24, 0xe8, 0x89, 0x54,
0x24, 0xec, 0x89, 0x4c, 0x24, 0xf0, 0x44, 0x89, 0x44, 0x24, 0xf4,
0x44, 0x89, 0x4c, 0x24, 0xf8, 0x4c, 0x8b, 0x54, 0x24, 0x18, 0x44,
0x89, 0x54, 0x24, 0xfc, 0x48, 0x8d, 0x64, 0x24, 0xe8, 0xe8, 0x0, 0x0,
0x0, 0x0, 0xc7, 0x44, 0x24, 0x4, 0x23, 0x0, 0x0, 0x0, 0x83, 0x4, 0x24,
0x15, 0x50, 0x66, 0xb8, 0x2b, 0x0, 0x8e, 0xd0, 0x58, 0xcb, 0x6a, 0x2b,
0x1f, 0x6a, 0x2b, 0x7, 0xff, 0xd0, 0x6a, 0x33, 0xe8, 0x0, 0x0, 0x0,
0x0, 0x83, 0x4, 0x24, 0x5, 0xcb, 0x5b, 0x5d, 0xc3
};

uint32_t (*_run_with_stack)(void*, void (*f)());
unsigned char _run_with_stack_asm[] = {
0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xe7, 0xf0, 0x48, 0x81, 0xef,
0x80, 0x0, 0x0, 0x0, 0x48, 0x89, 0xfc, 0xff, 0xd6, 0x48, 0x89, 0xec,
0x5d, 0xc3
};

#define SETUP_CALLERS()\
{\
Import & imp = imports["call_x86_thiscall_0"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_thiscall_0 = (uint32_t (*)(void*))f;\
}\
{\
Import & imp = imports["call_x86_thiscall_1"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_thiscall_1 = (uint32_t (*)(void*, uint32_t))f;\
}\
{\
Import & imp = imports["call_x86_thiscall_2"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_thiscall_2 = (uint32_t (*)(void*, uint32_t, uint32_t))f;\
}\
{\
Import & imp = imports["call_x86_thiscall_3"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_thiscall_3 = (uint32_t (*)(void*, uint32_t, uint32_t, uint32_t))f;\
}\
{\
Import & imp = imports["call_x86_thiscall_4"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_thiscall_4 = (uint32_t (*)(void*, uint32_t, uint32_t, uint32_t, uint32_t))f;\
}\
{\
Import & imp = imports["call_x86_thiscall_5"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_thiscall_5 = (uint32_t (*)(void*, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t))f;\
}\
{\
Import & imp = imports["call_x86_thiscall_6"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_thiscall_6 = (uint32_t (*)(void*, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t))f;\
}\
{\
Import & imp = imports["call_x86_cdecl_0"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_cdecl_0 = (uint32_t (*)(void*))f;\
}\
{\
Import & imp = imports["call_x86_cdecl_1"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_cdecl_1 = (uint32_t (*)(void*, uint32_t))f;\
}\
{\
Import & imp = imports["call_x86_cdecl_2"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_cdecl_2 = (uint32_t (*)(void*, uint32_t, uint32_t))f;\
}\
{\
Import & imp = imports["call_x86_cdecl_3"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_cdecl_3 = (uint32_t (*)(void*, uint32_t, uint32_t, uint32_t))f;\
}\
{\
Import & imp = imports["call_x86_cdecl_4"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_cdecl_4 = (uint32_t (*)(void*, uint32_t, uint32_t, uint32_t, uint32_t))f;\
}\
{\
Import & imp = imports["call_x86_cdecl_5"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_cdecl_5 = (uint32_t (*)(void*, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t))f;\
}\
{\
Import & imp = imports["call_x86_cdecl_6"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_cdecl_6 = (uint32_t (*)(void*, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t))f;\
}\
{\
Import & imp = imports["call_x86_stdcall_0"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_stdcall_0 = (uint32_t (*)(void*))f;\
}\
{\
Import & imp = imports["call_x86_stdcall_1"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_stdcall_1 = (uint32_t (*)(void*, uint32_t))f;\
}\
{\
Import & imp = imports["call_x86_stdcall_2"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_stdcall_2 = (uint32_t (*)(void*, uint32_t, uint32_t))f;\
}\
{\
Import & imp = imports["call_x86_stdcall_3"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_stdcall_3 = (uint32_t (*)(void*, uint32_t, uint32_t, uint32_t))f;\
}\
{\
Import & imp = imports["call_x86_stdcall_4"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_stdcall_4 = (uint32_t (*)(void*, uint32_t, uint32_t, uint32_t, uint32_t))f;\
}\
{\
Import & imp = imports["call_x86_stdcall_5"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_stdcall_5 = (uint32_t (*)(void*, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t))f;\
}\
{\
Import & imp = imports["call_x86_stdcall_6"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
call_x86_stdcall_6 = (uint32_t (*)(void*, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t))f;\
}\
{\
Import & imp = imports["_run_with_stack"];\
void * f = load_x86(imp.asm_data, imp.asm_size);\
_run_with_stack = (uint32_t (*)(void*, void (*f)()))f;\
}

static unsigned char patch_4F3850_asm[] = 
{
0x8b, 0x44, 0x24, 0x8, 0x89, 0xc2, 0xc1, 0xe0, 0x10, 0xc1, 0xea, 0x10,
0x3, 0x44, 0x24, 0x4, 0x83, 0xd2, 0x0, 0xf, 0xa4, 0xc2, 0x8, 0xc1,
0xe0, 0x8, 0x3, 0x44, 0x24, 0xc, 0x81, 0xd2, 0x0, 0x1, 0x0, 0x0, 0xc3,
0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90
};

;std::unordered_map<std::string, Import> imports(
{
{"free", Import{&free_imp_asm[0], sizeof free_imp_asm, (void*)&free_imp_wrapc}},
{"void * __cdecl operator new(unsigned int)", Import{&new_imp_asm[0], sizeof new_imp_asm, (void*)&new_imp_wrapc}},
{"malloc", Import{&malloc_imp_asm[0], sizeof malloc_imp_asm, (void*)&malloc_imp_wrapc}},
{"void __cdecl operator delete(void *)", Import{&delete_func_imp_asm[0], sizeof delete_func_imp_asm, (void*)&delete_func_imp_wrapc}},
{"void __cdecl operator delete[](void *)", Import{&delete_arr_func_imp_asm[0], sizeof delete_arr_func_imp_asm, (void*)&delete_arr_func_imp_wrapc}},
{"memcpy", Import{&memcpy_imp_asm[0], sizeof memcpy_imp_asm, (void*)&memcpy_imp_wrapc}},
{"strcmp", Import{&strcmp_imp_asm[0], sizeof strcmp_imp_asm, (void*)&strcmp_imp_wrapc}},
{"memcmp", Import{&memcmp_imp_asm[0], sizeof memcmp_imp_asm, (void*)&memcmp_imp_wrapc}},
{"abort", Import{&abort_imp_asm[0], sizeof abort_imp_asm, (void*)&abort_imp_wrapc}},
{"void __cdecl terminate(void)", Import{&terminateYAXXZ_imp_asm[0], sizeof terminateYAXXZ_imp_asm, (void*)&terminateYAXXZ_imp_wrapc}},
{"ORDINAL_WS2_32.DLL_115", Import{&WSAStartup_imp_asm[0], sizeof WSAStartup_imp_asm, (void*)&WSAStartup_imp_wrapc}},
{"InitializeCriticalSectionAndSpinCount", Import{&InitializeCriticalSectionAndSpinCount_imp_asm[0], sizeof InitializeCriticalSectionAndSpinCount_imp_asm, (void*)&InitializeCriticalSectionAndSpinCount_imp_wrapc}},
{"DeleteCriticalSection", Import{&DeleteCriticalSection_imp_asm[0], sizeof DeleteCriticalSection_imp_asm, (void*)&DeleteCriticalSection_imp_wrapc}},
{"rand", Import{&rand_imp_asm[0], sizeof rand_imp_asm, (void*)&rand_imp_wrapc}},
{"srand", Import{&srand_imp_asm[0], sizeof srand_imp_asm, (void*)&srand_imp_wrapc}},
{"IsProcessorFeaturePresent", Import{&IsProcessorFeaturePresent_imp_asm[0], sizeof IsProcessorFeaturePresent_imp_asm, (void*)&IsProcessorFeaturePresent_imp_wrapc}},
{"_beginthread", Import{&_beginthread_imp_asm[0], sizeof _beginthread_imp_asm, (void*)&_beginthread_imp_wrapc}},
{"EncodePointer", Import{&EncodePointer_imp_asm[0], sizeof EncodePointer_imp_asm, (void*)&EncodePointer_imp_wrapc}},
{"memmove", Import{&memmove_imp_asm[0], sizeof memmove_imp_asm, (void*)&memmove_imp_wrapc}},
{"memset", Import{&memset_imp_asm[0], sizeof memset_imp_asm, (void*)&memset_imp_wrapc}},
{"fseek", Import{&fseek_imp_asm[0], sizeof fseek_imp_asm, (void*)&fseek_imp_wrapc}},
{"fwrite", Import{&fwrite_imp_asm[0], sizeof fwrite_imp_asm, (void*)&fwrite_imp_wrapc}},
{"fclose", Import{&fclose_imp_asm[0], sizeof fclose_imp_asm, (void*)&fclose_imp_wrapc}},
{"_setjmp", Import{&_setjmp_imp_asm[0], sizeof _setjmp_imp_asm, (void*)&_setjmp_imp_wrapc}},
{"InitializeCriticalSection", Import{&InitializeCriticalSection_imp_asm[0], sizeof InitializeCriticalSection_imp_asm, (void*)&InitializeCriticalSection_imp_wrapc}},
{"EnterCriticalSection", Import{&EnterCriticalSection_imp_asm[0], sizeof EnterCriticalSection_imp_asm, (void*)&EnterCriticalSection_imp_wrapc}},
{"LeaveCriticalSection", Import{&LeaveCriticalSection_imp_asm[0], sizeof LeaveCriticalSection_imp_asm, (void*)&LeaveCriticalSection_imp_wrapc}},
{"InterlockedCompareExchange", Import{&InterlockedCompareExchange_imp_asm[0], sizeof InterlockedCompareExchange_imp_asm, (void*)&InterlockedCompareExchange_imp_wrapc}},
{"_setjmp3", Import{&_setjmp3_imp_asm[0], sizeof _setjmp3_imp_asm, (void*)&_setjmp3_imp_wrapc}},
{"public: void __thiscall std::_Container_base0::_Orphan_all(void)", Import{&orphan_imp_asm[0], sizeof orphan_imp_asm, (void*)&orphan_imp_wrapc}},
{"_libm_sse2_cos_precise", Import{&_libm_sse2_cos_precise_imp_asm[0], sizeof _libm_sse2_cos_precise_imp_asm, (void*)&_libm_sse2_cos_precise_imp_wrapc}},
{"_libm_sse2_sin_precise", Import{&_libm_sse2_sin_precise_imp_asm[0], sizeof _libm_sse2_sin_precise_imp_asm, (void*)&_libm_sse2_sin_precise_imp_wrapc}},
{"_libm_sse2_sqrt_precise", Import{&_libm_sse2_sqrt_precise_imp_asm[0], sizeof _libm_sse2_sqrt_precise_imp_asm, (void*)&_libm_sse2_sqrt_precise_imp_wrapc}},
{"_libm_sse2_pow_precise", Import{&_libm_sse2_pow_precise_imp_asm[0], sizeof _libm_sse2_pow_precise_imp_asm, (void*)&_libm_sse2_pow_precise_imp_wrapc}},
{"_libm_sse2_exp_precise", Import{&_libm_sse2_exp_precise_asm[0], sizeof _libm_sse2_exp_precise_asm, (void*)&_libm_sse2_exp_precise_wrapc}},
{"_libm_sse2_acos_precise", Import{&_libm_sse2_acos_precise_asm[0], sizeof _libm_sse2_acos_precise_asm, (void*)&_libm_sse2_acos_precise_wrapc}},
{"_libm_sse2_asin_precise", Import{&_libm_sse2_asin_precise_asm[0], sizeof _libm_sse2_asin_precise_asm, (void*)&_libm_sse2_asin_precise_wrapc}},
{"public: __thiscall std::basic_istream<char,struct std::char_traits<char> >::basic_istream<char,struct std::char_traits<char> >(class std::basic_streambuf<char,struct std::char_traits<char> > *,bool)", Import{&basic_istream_char_ctor_imp_asm[0], sizeof basic_istream_char_ctor_imp_asm, (void*)&basic_istream_char_ctor_imp_wrapc}},
{"protected: __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::basic_streambuf<char,struct std::char_traits<char> >(void)", Import{&basic_streambuf_char_ctor_imp_asm[0], sizeof basic_streambuf_char_ctor_imp_asm, (void*)&basic_streambuf_char_ctor_imp_wrapc}},
{"protected: void __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::_Init(void)", Import{&basic_streambuf_char__Init_empty_imp_asm[0], sizeof basic_streambuf_char__Init_empty_imp_asm, (void*)&basic_streambuf_char__Init_empty_imp_wrapc}},
{"public: void __thiscall std::basic_ios<char,struct std::char_traits<char> >::setstate(int,bool)", Import{&basic_ios_char_setstate_reraise_imp_asm[0], sizeof basic_ios_char_setstate_reraise_imp_asm, (void*)&basic_ios_char_setstate_reraise_imp_wrapc}},
{"public: virtual __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::~basic_streambuf<char,struct std::char_traits<char> >(void)", Import{&basic_streambuf_char_dtor_imp_asm[0], sizeof basic_streambuf_char_dtor_imp_asm, (void*)&basic_streambuf_char_dtor_imp_wrapc}},
{"public: virtual __thiscall std::basic_istream<char,struct std::char_traits<char> >::~basic_istream<char,struct std::char_traits<char> >(void)", Import{&basic_istream_char_dtor_imp_asm[0], sizeof basic_istream_char_dtor_imp_asm, (void*)&basic_istream_char_dtor_imp_wrapc}},
{"public: virtual __thiscall std::basic_ios<char,struct std::char_traits<char> >::~basic_ios<char,struct std::char_traits<char> >(void)", Import{&basic_ios_char_dtor_imp_asm[0], sizeof basic_ios_char_dtor_imp_asm, (void*)&basic_ios_char_dtor_imp_wrapc}},
{"struct _iobuf * __cdecl std::_Fiopen(char const *,int,int)", Import{&_Fiopen_imp_asm[0], sizeof _Fiopen_imp_asm, (void*)&_Fiopen_imp_wrapc}},
{"public: class std::basic_istream<char,struct std::char_traits<char> > & __thiscall std::basic_istream<char,struct std::char_traits<char> >::operator>>(int &)", Import{&basic_istream_char_read_int_imp_asm[0], sizeof basic_istream_char_read_int_imp_asm, (void*)&basic_istream_char_read_int_imp_wrapc}},
{"protected: __thiscall std::basic_ios<char,struct std::char_traits<char> >::basic_ios<char,struct std::char_traits<char> >(void)", Import{&basic_ios_char_ctor_imp_asm[0], sizeof basic_ios_char_ctor_imp_asm, (void*)&basic_ios_char_ctor_imp_wrapc}},
{"public: __thiscall std::basic_iostream<char,struct std::char_traits<char> >::basic_iostream<char,struct std::char_traits<char> >(class std::basic_streambuf<char,struct std::char_traits<char> > *)", Import{&basic_iostream_char_ctor_imp_asm[0], sizeof basic_iostream_char_ctor_imp_asm, (void*)&basic_iostream_char_ctor_imp_wrapc}},
{"public: virtual __thiscall std::basic_iostream<char,struct std::char_traits<char> >::~basic_iostream<char,struct std::char_traits<char> >(void)", Import{&basic_iostream_char_dtor_imp_asm[0], sizeof basic_iostream_char_dtor_imp_asm, (void*)&basic_iostream_char_dtor_imp_wrapc}},
{"private: static void __cdecl std::ios_base::_Ios_base_dtor(class std::ios_base *)", Import{&ios_base_Ios_base_dtor_imp_asm[0], sizeof ios_base_Ios_base_dtor_imp_asm, (void*)&ios_base_Ios_base_dtor_imp_wrapc}},
{"public: __int64 __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::sputn(char const *,__int64)", Import{&basic_streambuf_char_sputn_imp_asm[0], sizeof basic_streambuf_char_sputn_imp_asm, (void*)&basic_streambuf_char_sputn_imp_wrapc}},
{"__uncaught_exception", Import{&__uncaught_exception_imp_asm[0], sizeof __uncaught_exception_imp_asm, (void*)&__uncaught_exception_imp_wrapc}},
{"public: void __thiscall std::basic_ostream<char,struct std::char_traits<char> >::_Osfx(void)", Import{&basic_ostream_char__Osfx_imp_asm[0], sizeof basic_ostream_char__Osfx_imp_asm, (void*)&basic_ostream_char__Osfx_imp_wrapc}},
{"public: class std::basic_ostream<char,struct std::char_traits<char> > & __thiscall std::basic_ostream<char,struct std::char_traits<char> >::operator<<(int)", Import{&basic_ostream_char_print_int_imp_asm[0], sizeof basic_ostream_char_print_int_imp_asm, (void*)&basic_ostream_char_print_int_imp_wrapc}},
{"protected: void __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::setg(char *,char *,char *)", Import{&basic_streambuf_char_setg_imp_asm[0], sizeof basic_streambuf_char_setg_imp_asm, (void*)&basic_streambuf_char_setg_imp_wrapc}},
{"protected: __thiscall std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::basic_ios<wchar_t,struct std::char_traits<wchar_t> >(void)", Import{&basic_ios_wchar_ctor_asm[0], sizeof basic_ios_wchar_ctor_asm, (void*)&basic_ios_wchar_ctor_wrapc}},
{"public: __thiscall std::basic_iostream<wchar_t,struct std::char_traits<wchar_t> >::basic_iostream<wchar_t,struct std::char_traits<wchar_t> >(class std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> > *)", Import{&basic_iostream_wchar_ctor_asm[0], sizeof basic_iostream_wchar_ctor_asm, (void*)&basic_iostream_wchar_ctor_wrapc}},
{"protected: __thiscall std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >(void)", Import{&basic_streambuf_wchar_ctor_asm[0], sizeof basic_streambuf_wchar_ctor_asm, (void*)&basic_streambuf_wchar_ctor_wrapc}},
{"public: virtual __thiscall std::basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,struct std::char_traits<wchar_t> >(void)", Import{&basic_streambuf_wchar_dtor_asm[0], sizeof basic_streambuf_wchar_dtor_asm, (void*)&basic_streambuf_wchar_dtor_wrapc}},
{"public: virtual __thiscall std::basic_iostream<wchar_t,struct std::char_traits<wchar_t> >::~basic_iostream<wchar_t,struct std::char_traits<wchar_t> >(void)", Import{&basic_iostream_wchar_dtor_asm[0], sizeof basic_iostream_wchar_dtor_asm, (void*)&basic_iostream_wchar_dtor_wrapc}},
{"public: virtual __thiscall std::basic_ios<wchar_t,struct std::char_traits<wchar_t> >::~basic_ios<wchar_t,struct std::char_traits<wchar_t> >(void)", Import{&basic_ios_wchar_dtor_asm[0], sizeof basic_ios_wchar_dtor_asm, (void*)&basic_ios_wchar_dtor_wrapc}},
{"call_x86_thiscall_0", Import{&call_x86_thiscall_0_asm[0], sizeof call_x86_thiscall_0_asm, NULL}},
{"call_x86_thiscall_1", Import{&call_x86_thiscall_1_asm[0], sizeof call_x86_thiscall_1_asm, NULL}},
{"call_x86_thiscall_2", Import{&call_x86_thiscall_2_asm[0], sizeof call_x86_thiscall_2_asm, NULL}},
{"call_x86_thiscall_3", Import{&call_x86_thiscall_3_asm[0], sizeof call_x86_thiscall_3_asm, NULL}},
{"call_x86_thiscall_4", Import{&call_x86_thiscall_4_asm[0], sizeof call_x86_thiscall_4_asm, NULL}},
{"call_x86_thiscall_5", Import{&call_x86_thiscall_5_asm[0], sizeof call_x86_thiscall_5_asm, NULL}},
{"call_x86_thiscall_6", Import{&call_x86_thiscall_6_asm[0], sizeof call_x86_thiscall_6_asm, NULL}},
{"call_x86_cdecl_0", Import{&call_x86_cdecl_0_asm[0], sizeof call_x86_cdecl_0_asm, NULL}},
{"call_x86_cdecl_1", Import{&call_x86_cdecl_1_asm[0], sizeof call_x86_cdecl_1_asm, NULL}},
{"call_x86_cdecl_2", Import{&call_x86_cdecl_2_asm[0], sizeof call_x86_cdecl_2_asm, NULL}},
{"call_x86_cdecl_3", Import{&call_x86_cdecl_3_asm[0], sizeof call_x86_cdecl_3_asm, NULL}},
{"call_x86_cdecl_4", Import{&call_x86_cdecl_4_asm[0], sizeof call_x86_cdecl_4_asm, NULL}},
{"call_x86_cdecl_5", Import{&call_x86_cdecl_5_asm[0], sizeof call_x86_cdecl_5_asm, NULL}},
{"call_x86_cdecl_6", Import{&call_x86_cdecl_6_asm[0], sizeof call_x86_cdecl_6_asm, NULL}},
{"call_x86_stdcall_0", Import{&call_x86_stdcall_0_asm[0], sizeof call_x86_stdcall_0_asm, NULL}},
{"call_x86_stdcall_1", Import{&call_x86_stdcall_1_asm[0], sizeof call_x86_stdcall_1_asm, NULL}},
{"call_x86_stdcall_2", Import{&call_x86_stdcall_2_asm[0], sizeof call_x86_stdcall_2_asm, NULL}},
{"call_x86_stdcall_3", Import{&call_x86_stdcall_3_asm[0], sizeof call_x86_stdcall_3_asm, NULL}},
{"call_x86_stdcall_4", Import{&call_x86_stdcall_4_asm[0], sizeof call_x86_stdcall_4_asm, NULL}},
{"call_x86_stdcall_5", Import{&call_x86_stdcall_5_asm[0], sizeof call_x86_stdcall_5_asm, NULL}},
{"call_x86_stdcall_6", Import{&call_x86_stdcall_6_asm[0], sizeof call_x86_stdcall_6_asm, NULL}},
{"_run_with_stack", Import{&_run_with_stack_asm[0], sizeof _run_with_stack_asm, NULL}}
}
);std::vector<Patch> patches(
{
Patch{&sub_4120D0_asm[0], sizeof sub_4120D0_asm, (void*)&sub_4120D0_wrapc, 0x412710,0},
Patch{&sub_4C6970_asm[0], sizeof sub_4C6970_asm, (void*)&sub_4C6970_wrapc, 0x4C6580,0},
Patch{&sub_4D8B70_asm[0], sizeof sub_4D8B70_asm, (void*)&sub_4D8B70_wrapc, 0x4D8F70,0},
Patch{&sub_469210_asm[0], sizeof sub_469210_asm, (void*)&sub_469210_wrapc, 0,SQLITE_TABLE+4*72},
Patch{&sub_4698F0_asm[0], sizeof sub_4698F0_asm, (void*)&sub_4698F0_wrapc, 0,SQLITE_TABLE+4*10},
Patch{&sub_46A090_asm[0], sizeof sub_46A090_asm, (void*)&sub_46A090_wrapc, 0,SQLITE_TABLE+4*94},
Patch{&sub_46AE00_asm[0], sizeof sub_46AE00_asm, (void*)&sub_46AE00_wrapc, 0,SQLITE_TABLE+4*57},
Patch{&sub_46A3A0_asm[0], sizeof sub_46A3A0_asm, (void*)&sub_46A3A0_wrapc, 0,SQLITE_TABLE+4*20},
Patch{&sub_46A320_asm[0], sizeof sub_46A320_asm, (void*)&sub_46A320_wrapc, 0,SQLITE_TABLE+4*19},
Patch{&sub_4633C0_asm[0], sizeof sub_4633C0_asm, (void*)&sub_4633C0_wrapc, 0,SQLITE_TABLE+4*16},
Patch{&sub_469530_asm[0], sizeof sub_469530_asm, (void*)&sub_469530_wrapc, 0,SQLITE_TABLE+4*2},
Patch{&sub_468330_asm[0], sizeof sub_468330_asm, (void*)&sub_468330_wrapc, 0,SQLITE_TABLE+4*70},
Patch{&sub_463500_asm[0], sizeof sub_463500_asm, (void*)&sub_463500_wrapc, 0,SQLITE_TABLE+4*55},
Patch{&sub_46B620_asm[0], sizeof sub_46B620_asm, (void*)&sub_46B620_wrapc, 0,SQLITE_TABLE+4*96}
}
);std::vector<DirectPatch> direct_patches(
{
DirectPatch{0x4f3850, &patch_4F3850_asm[0], sizeof patch_4F3850_asm}
}
);